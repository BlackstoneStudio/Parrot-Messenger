name: Release

on:
  push:
    branches:
      - master
  pull_request:
    types: [closed]
    branches:
      - master

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  release:
    name: Release
    # Only run on direct pushes to master or when PRs are merged
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Build
        run: npm run build

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: Get current version
        id: current_version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if this is the first release after version bump
        id: check_first_release
        run: |
          # Check if a tag exists for the current version
          if git rev-parse "v${{ steps.current_version.outputs.version }}" >/dev/null 2>&1; then
            echo "first_release=false" >> $GITHUB_OUTPUT
          else
            echo "first_release=true" >> $GITHUB_OUTPUT
            echo "This appears to be the first release for version ${{ steps.current_version.outputs.version }}"
          fi

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Configure git
          git config --global user.name "semantic-release-bot"
          git config --global user.email "semantic-release-bot@martynus.net"
          
          # Check if version tag already exists
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if git rev-parse "v${CURRENT_VERSION}" >/dev/null 2>&1; then
            echo "Tag v${CURRENT_VERSION} already exists, running semantic-release normally"
            npx semantic-release
          else
            # Check if there are any previous tags
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ] || [ "$LAST_TAG" != "v${CURRENT_VERSION}" ]; then
              echo "Package version ($CURRENT_VERSION) is ahead of tags ($LAST_TAG)"
              echo "Creating release for existing version..."
              
              # Generate release notes from commits since last tag
              if [ -z "$LAST_TAG" ]; then
                COMMITS=$(git log --format="- %s" --no-merges)
              else
                COMMITS=$(git log ${LAST_TAG}..HEAD --format="- %s" --no-merges)
              fi
              
              # Create release notes
              cat > RELEASE_NOTES_CI.md << EOF
          # Release v${CURRENT_VERSION}

          ## Changes

          ${COMMITS}

          ---
          *Released by CI/CD pipeline*
          EOF
              
              # Create GitHub release
              gh release create "v${CURRENT_VERSION}" \
                --title "Release v${CURRENT_VERSION}" \
                --notes-file RELEASE_NOTES_CI.md
              
              # Publish to npm
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
              npm publish
              
              echo "Successfully released v${CURRENT_VERSION}"
            else
              echo "Running semantic-release normally"
              npx semantic-release
            fi
          fi

      - name: Summary
        if: always()
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Current version: ${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- First release: ${{ steps.check_first_release.outputs.first_release }}" >> $GITHUB_STEP_SUMMARY
          echo "- Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "- PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          fi